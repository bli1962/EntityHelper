// =============================================================================== 
// <autogenerated>
// 		Class Name: DataTrans.cs
// 		Object purpose: The class is designed for manipulating data in a database table. 
// 		It can be used to fetch data via data access component and return as a DataReader 
// 		or DataSet. This component could be fit in the position of middle tier if the system  
// 		is designed as multi-tiers. 
// 
// 		Designed by: Ben Li. 
// 		Written by: Ben Li. 
// 		Codes generated Date: 05/08/2005 2:50:38 PM.
// 		Last Modified Date:   25/10/2014 2:50:38 PM.
// </autogenerated> 
// 
// =============================================================================== 
// Copyright (C) 2005 Mizuho Corporate Bank, Limited Sydney Branch.
// All rights reserved. 
// 
// THIS CODES ARE GENERATED AUTOMATICLLY AND INFORMATION IS PROVIDED 'AS IS' 
// WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT 
// NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS 
// FOR A PARTICULAR PURPOSE.
// =============================================================================== 

using System;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using mhcb.cs.Shared.CmdBuilder;
using mhcb.cs.Shared.DataAccess;
//using mhcb.cs.Shared.Trace;
using log4net;
using log4net.Config;

namespace mhcb.EntityHelper
{
    /// <summary>
    /// Summary description for DataTrans.
    /// </summary>
    //[Transaction(TransactionOption.Required)]
    public class DataTransSvc   //: ServicedComponent
    {

        public  static readonly ILog _logWriter = LogManager.GetLogger(typeof(DataTransSvc));

        public DataTransSvc()
        {
            // TODO: Add constructor logic here
            //DataConnection oDC = new DataConnection();
            //oConn = oDC.SetSqlConnection();
            //oConn.Open();
            //BasicConfigurator.Configure();
            XmlConfigurator.Configure();
        }

        [SqlCommandMethod(CommandType.Text, "Select table_name From Information_Schema.Tables Where Table_Type='Base Table'")]
        public DataSet invoke_getSchemaTables_ds()
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_getSchemaTables_ds");

            DataSet ds = new DataSet();
            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();
                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();

                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { });
                ds = oDE.ExecuteDataSet(oCommand, oConnection); // return DataSet
            }
            catch (Exception e)
            {
                //ContextUtil.SetAbort(); 
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
                ds = null;
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}

            return ds;
        }


        [SqlCommandMethod(CommandType.Text, "Select table_name From Information_Schema.Tables Where Table_Type='Base Table' Order by table_name")]
        public SqlDataReader invoke_getSchemaTables_dr()
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_getSchemaTables_dr");

            SqlDataReader dr = null;
            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();
                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();
                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { });
                dr = oDE.ExecuteDataReader(oCommand, oConnection);  // return DataReader
            }
            catch (Exception e)
            {
                //ContextUtil.SetAbort(); 
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
                dr = null;
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}


            return dr;
        }


        [SqlCommandMethod(CommandType.Text, "Select table_name From Information_Schema.Tables Where Table_Type='VIEW' Order by table_name")]
        public SqlDataReader invoke_getSchemaViews_dr()
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_getSchemaViews_dr");

            SqlDataReader dr = null;
            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();

                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();

                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { });
                dr = oDE.ExecuteDataReader(oCommand, oConnection);  // return DataReader
            }
            catch (Exception e)
            {
                //ContextUtil.SetAbort(); 
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
                dr = null;
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}


            return dr;
        }


        [SqlCommandMethod(CommandType.Text, "Select name as tblName from sysobjects where type = 'P' and category = 0 and Substring([Name], 1, 3) <>'dt_' Order by name")]
        public SqlDataReader invoke_getStoredProcs()
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_getStoredProcs");

            SqlDataReader dr = null;
            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();

                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();

                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { });
                dr = oDE.ExecuteDataReader(oCommand, oConnection);  // return DataReader
            }
            catch (Exception e)
            {
                //ContextUtil.SetAbort(); 
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}


            return dr;
        }


        //[ SqlCommandMethod(CommandType.StoredProcedure, "Tools_getBaseTablesDetails")]
        [SqlCommandMethod(CommandType.Text, "SELECT * FROM information_schema.columns where table_name = 'authors'")]
        public SqlDataReader invoke_Tools_getBaseTablesDetails(
        [SqlParameter("table_name", SqlDbType.VarChar, 100)] string p1)
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_Tools_getBaseTablesDetails");

            SqlDataReader dr = null;
            string cSql = "";


            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();

                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();

                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { p1 });


                //cSql = "SELECT column_name, data_type, ";
                //cSql = cSql + "case data_type ";
                //cSql = cSql + "		when 'binary' then character_maximum_length ";
                //cSql = cSql + "		when 'char' then character_maximum_length ";
                //cSql = cSql + "		when 'nchar' then character_maximum_length ";
                //cSql = cSql + "		when 'nvarchar'then character_maximum_length ";
                //cSql = cSql + "		when 'varbinary' then character_maximum_length ";
                //cSql = cSql + "		when 'varchar' then character_maximum_length ";
                //cSql = cSql + "		else 0 ";
                //cSql = cSql + "end as Length, ";
                //cSql = cSql + "numeric_precision as Precise, ";
                //cSql = cSql + "numeric_scale as Scale, ";
                //cSql = cSql + "ORDINAL_POSITION, ";
                //cSql = cSql + "IS_NULLABLE ";
                //cSql = cSql + "FROM information_schema.columns where table_name = '" + p1 + "'";
                //cSql = cSql + "order by ORDINAL_POSITION ";


                cSql = "SELECT c.column_name, c.data_type, ";
                cSql = cSql + "case c.data_type ";
                cSql = cSql + "when 'binary' then character_maximum_length ";
                cSql = cSql + "when 'char' then character_maximum_length ";
                cSql = cSql + "when 'nchar' then character_maximum_length ";
                cSql = cSql + "when 'nvarchar'then character_maximum_length ";
                cSql = cSql + "when 'varbinary' then character_maximum_length ";
                cSql = cSql + "when 'varchar' then character_maximum_length ";
                cSql = cSql + "else 0 ";
                cSql = cSql + "end as Length, ";
                cSql = cSql + "c.numeric_precision as Precise, ";
                cSql = cSql + "c.numeric_scale as Scale, ";
                cSql = cSql + "c.ORDINAL_POSITION, ";
                cSql = cSql + "c.IS_NULLABLE, ";
                cSql = cSql + "CASE WHEN pk.COLUMN_NAME IS NOT NULL THEN 'PRIMARY KEY' ELSE '' END AS KeyType ";
                cSql = cSql + "FROM information_schema.columns As c ";

                cSql = cSql + "LEFT JOIN ( ";
                cSql = cSql + "SELECT ku.TABLE_CATALOG,ku.TABLE_SCHEMA,ku.TABLE_NAME,ku.COLUMN_NAME  ";
                cSql = cSql + "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tc ";
                cSql = cSql + "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS ku ";
                cSql = cSql + "ON tc.CONSTRAINT_TYPE = 'PRIMARY KEY' ";
                cSql = cSql + "AND tc.CONSTRAINT_NAME = ku.CONSTRAINT_NAME ";
                cSql = cSql + ") pk ";
                cSql = cSql + "ON  c.TABLE_CATALOG = pk.TABLE_CATALOG ";
                cSql = cSql + "AND c.TABLE_SCHEMA  = pk.TABLE_SCHEMA ";
                cSql = cSql + "AND c.TABLE_NAME    = pk.TABLE_NAME ";
                cSql = cSql + "AND c.COLUMN_NAME   = pk.COLUMN_NAME ";

                cSql = cSql + "where c.table_name = '" + p1 + "'";
                cSql = cSql + "order by c.ORDINAL_POSITION ";



                //http://www.sqlservercentral.com/scripts/viewscript.asp?scriptid=1311
                //cSql = "Select ";
                //cSql = cSql + "'Table Name ' = B.name, ";
                //cSql = cSql + "'Column name' = A.name, ";
                //cSql = cSql + "'Column No'   = colid, ";
                //cSql = cSql + "'Type'        = type_name (xusertype), ";
                //cSql = cSql + "'Length'      = convert (int, length), ";
                //cSql = cSql + "'Allow Nulls'= case when isnullable = 0 then 'No' else 'Yes' end ";
                //cSql = cSql + "From syscolumns A, sysobjects B ";
                //cSql = cSql + "Where A.id=B.id and B.type ='U' and A. number=0 and B.Status > 0  ";
                //cSql = cSql + "Order by b.name, colid ";


                // override 
                oCommand.CommandText = cSql;

                dr = oDE.ExecuteDataReader(oCommand, oConnection);  // return DataReader
            }
            catch (Exception e)
            {
                //ContextUtil.SetAbort(); 
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}


            return dr;
        }


        //[SqlCommandMethod(CommandType.Text, "SELECT * FROM information_schema.columns where table_name = 'authors'")]
        //[SqlCommandMethod(CommandType.StoredProcedure, "Tools_getSParams")]
        //[SqlParameter("SpName", SqlDbType.VarChar, 100)] string p1 )
        [SqlCommandMethod(CommandType.StoredProcedure, "sp_procedure_params_rowset")]
        public SqlDataReader invoke_Tools_getSParams(
        [SqlParameter("procedure_name", SqlDbType.VarChar, 100)] string p1)
        {
            Type mtype = typeof(DataTransSvc);
            MethodInfo info = (MethodInfo)mtype.GetMethod("invoke_Tools_getSParams");

            SqlDataReader dr = null;

            var oDE = new DataExecution();
            //{
            try
            {
                //TraceMaker.TraceStart();
                var oConnection = new SqlConnection()
                {
                    ConnectionString = oDE.getDefaultConnectionString()
                };
                oConnection.Open();

                SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(oConnection, info, new object[] { p1 });
                dr = oDE.ExecuteDataReader(oCommand, oConnection);  // return DataReader
            }
            catch (Exception e)
            {
                //TraceMaker.TraceException(e);
                _logWriter.ErrorFormat(string.Format("Exception Caught:\r\n{0}", e));
            }
            finally
            {
                //TraceMaker.TraceEnd();
            }
            //}

            return dr;
        }
    }
}
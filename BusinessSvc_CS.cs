// =============================================================================== 
// 		Class Name: clsBusinessService_CS.cs
// 		Object purpose: The class is designed for manipulating data in a database table. 
// 		It can be used to fetch data via data access component and return as a DataReader 
// 		or DataSet. This component could be fit in the position of middle tier if the system  
// 		is designed as multi-tiers. 
// 
// 		Designed by: Ben Li. 
// 		Written by:  Ben Li. 
//
// 		Codes generated Date: 05/08/2005 2:50:38 PM.
// 		Last Modified Date:   07/02/2014 12:00:00 PM.
// 
// =============================================================================== 
// Copyright (C) 2005 Mizuho Corporate Bank, Limited Sydney Branch.
// All rights reserved. 
// 
// THIS CODES ARE GENERATED AUTOMATICLLY AND INFORMATION IS PROVIDED 'AS IS' 
// WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT 
// NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS 
// FOR A PARTICULAR PURPOSE.
// =============================================================================== 


using System.Globalization;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Configuration;
using log4net;
using log4net.Config;


namespace mhcb.EntityHelper
{

	/// <summary>
	/// Summary description for clsBusinessService_CS.
	/// </summary>
	public class BusinessSvcCs : BusinessSvcBase
	{
		public  static readonly ILog _logWriter = LogManager.GetLogger(typeof(BusinessSvcCs));

		public BusinessSvcCs()
		{
		}

		public BusinessSvcCs(string server, string dbName, string userName, string password) 
			: base(server, dbName, userName, password)
		{
			//BasicConfigurator.Configure();
			XmlConfigurator.Configure();
		}

		//public string CreateBsClassFilesCs(SqlDataReader dr1)
		//{
		//	string dsNamespace = ConfigurationManager.AppSettings["DSNamespace.CS"];
		//	string entityNamespace = ConfigurationManager.AppSettings["EntityNamespace.CS"];
		//	string dsClassPrefix = ConfigurationManager.AppSettings["DSClassPrefix"];

		//	var oclsData = new DataSvc(_Server, _DbName, _UserName, _Password);

		//	if (dr1 != null)
		//	{
		//		while (dr1.Read())
		//		{
		//			string cSpName = dr1.GetString(0);
		//			cSpName = cSpName.Substring(0, 1).ToUpper() + cSpName.Substring(1, cSpName.Length - 1);

		//			var dr = oclsData.drGetSParams(cSpName);

		//			StreamWriter sw = null;
		//			StringBuilder sb = null;

		//			sb = new StringBuilder(dsClassPrefix + "_" + cSpName);
		//			sb.Append(".cs");

		//			var oFileInfo = new FileInfo(sb.ToString());
		//			sw = oFileInfo.CreateText();

		//			sb = new StringBuilder("");

		//			sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");
		//			sb.Append(GlobalVar.cTab[0] + "// <autogenerated>");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tClass Name: ");
		//			sb.Append(dsClassPrefix + "_" + cSpName);
		//			sb.Append(".cs");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tObject purpose: The class is designed for manipulating data in a database table. ");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tIt can be used to fetch data via data access component and return as a DataReader ");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tor DataSet. This component could be fit in the position of middle tier if the system  ");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tis designed as multi-tiers. ");
		//			sb.Append(GlobalVar.cTab[0] + "// ");

		//			sb.Append(GlobalVar.cTab[0] + "// \t\tDesigned & developed by: Ben Li. ");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tThe last modified date: 17/02/2006.");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\t");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\t=====================================================");
		//			sb.Append(GlobalVar.cTab[0] + "// \t\tScripts generated Date: " + System.DateTime.Now + ".");
		//			sb.Append(GlobalVar.cTab[0] + "// </autogenerated> ");
		//			sb.Append(GlobalVar.cTab[0] + "// ");

		//			sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");
		//			sb.Append(GlobalVar.cTab[0] + "// Copyright (C) 2005 Mizuho Corporate Bank, Limited Sydney Branch.");
		//			sb.Append(GlobalVar.cTab[0] + "// All rights reserved. ");
		//			sb.Append(GlobalVar.cTab[0] + "// ");
		//			sb.Append(GlobalVar.cTab[0] + "// THIS CODES ARE GENERATED AUTOMATICLLY AND INFORMATION IS PROVIDED 'AS IS' ");
		//			sb.Append(GlobalVar.cTab[0] + "// WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT ");
		//			sb.Append(GlobalVar.cTab[0] + "// NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS ");
		//			sb.Append(GlobalVar.cTab[0] + "// FOR A PARTICULAR PURPOSE.");
		//			sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");

		//			sb.Append(GlobalVar.cTab[0] + " ");
		//			sb.Append(GlobalVar.cTab[0] + "using System;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.Data;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.IO;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.Data.SqlClient;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.Data.OleDb;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.Reflection;");
		//			sb.Append(GlobalVar.cTab[0] + "using System.EnterpriseServices;");

		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[0] + "using " + entityNamespace + " "); ;
		//			sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.DataAccess;");
		//			sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.CmdBuilder;");
		//			sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.Trace;");


		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[0] + "namespace " + dsNamespace);		// begin of namespace

		//			sb.Append(GlobalVar.cTab[0] + "{");
		//			sb.Append(GlobalVar.cTab[0] + "[Transaction(TransactionOption.Required)]");
		//			sb.Append(GlobalVar.cTab[0] + "public class " + dsClassPrefix + "_" + cSpName + "_DataSev" + " : COMServiceBase ");
		//			sb.Append(GlobalVar.cTab[0] + "{");		// begin of class

					
		//			string className = dsClassPrefix + "_" + cSpName + "";
		//			string spName = "\"" + cSpName + "\"";
		//			string methodName = "\"" + "invoke_" + cSpName + "\"";
		//			string databaseName = "\"" + _DbName + "\"";

		//			sb.Append(GlobalVar.cTab[1] + "[ SqlCommandMethod(CommandType.StoredProcedure, " + spName + ")]");
		//			sb.Append(GlobalVar.cTab[1] + "public SqlDataReader invoke_" + cSpName + "( ");

		//			// get a parameter string for the function
		//			CreateParameterList(dr);

		//			sb.Append(sb1);

		//			sb.Append(" )");
		//			sb.Append(GlobalVar.cTab[1] + "{");		// begin of method

		//			sb.Append(GlobalVar.cTab[3] + "Type mtype = typeof(" + className + ");");
		//			sb.Append(GlobalVar.cTab[3] + "MethodInfo info = (MethodInfo)mtype.GetMethod(" + methodName + ");");
		//			sb.Append(GlobalVar.cTab[3] + "SqlConnection dbConnection = new SqlConnection();");
		//			sb.Append(GlobalVar.cTab[3] + "SqlDataReader dr = null;");

		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[3] + "SqlCommand oCommand; ");
		//			sb.Append(GlobalVar.cTab[3] + "DataExecution oDE = new DataExecution(); ");


		//			//*** set default value for output parameter *** 
		//			sb.Append(sb3);

		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[3] + "try");			// begin of try
		//			sb.Append(GlobalVar.cTab[3] + "{");

		//			sb.Append(GlobalVar.cTab[4] + "//TraceMaker.TraceStart();");
		//			sb.Append(GlobalVar.cTab[4] + "oCommand = SqlCommandGenerator.GenerateCommand(dbConnection, info, new object[] { ");
		//			sb.Append(sb2);
		//			sb.Append(" });");
		//			sb.Append(GlobalVar.cTab[0] );

		//			sb.Append(GlobalVar.cTab[4] + "dr = oDE.ExecuteDataReader(oCommand);	\t\t// if return DataReader");
		//			sb.Append(GlobalVar.cTab[4] + "//ds = oDE.ExecuteDataSet(oCommand);		\t\t// if return DataSet");
		//			sb.Append(GlobalVar.cTab[4] + "//oDE.ExecuteNonQuery(oCommand);			\t\t// if no return ");

		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[4] + "ContextUtil.SetComplete(); ");

		//			sb.Append(GlobalVar.cTab[3] + "}");
		//			sb.Append(GlobalVar.cTab[3] + "catch (Exception e) ");
		//			sb.Append(GlobalVar.cTab[3] + "{");
		//			sb.Append(GlobalVar.cTab[4] + "ContextUtil.SetAbort(); ");
		//			sb.Append(GlobalVar.cTab[4] + "//TraceMaker.TraceException(e);");
		//			sb.Append(GlobalVar.cTab[3] + "}");
		//			sb.Append(GlobalVar.cTab[3] + "finally ");
		//			sb.Append(GlobalVar.cTab[3] + "{");
		//			sb.Append(GlobalVar.cTab[4] + "oCommand = null; ");
		//			sb.Append(GlobalVar.cTab[4] + "oDE = null; ");
		//			sb.Append(GlobalVar.cTab[4] + "//TraceMaker.TraceEnd();");
		//			sb.Append(GlobalVar.cTab[3] + "}");

		//			sb.Append(GlobalVar.cTab[0] );
		//			sb.Append(GlobalVar.cTab[3] + "return dr;");   // end of try

		//			sb.Append(GlobalVar.cTab[1] + "}");			// end of method
		//			sb.Append(GlobalVar.cTab[0] + "}");			// end of classs

		//			sb.Append(GlobalVar.cTab[0] + "}");			// end of namespace

		//			output = output + sb;
		//			sw.WriteLine(sb.ToString());


		//			sw.Flush();
		//			sw.Close();

		//		}

		//		return "The C# data layer class has been generated!";
		//	}
		//	else
		//	{
		//		return "The no C# data layer class has been generated!";
		//	}
		//}


		public string CreateBsClassFilesCsV2(CheckedListBox checkedListBox1)
		{
			string dsNamespace = ConfigurationManager.AppSettings["DSNamespace.CS"];
			string entityNamespace = ConfigurationManager.AppSettings["EntityNamespace.CS"];
			string dsClassPrefix = ConfigurationManager.AppSettings["DSClassPrefix"];

			

			var oclsData = new DataSvc(_Server, _DbName, _UserName, _Password);

			for (int j = 0; j < checkedListBox1.CheckedItems.Count; j++)
			{
				string cSPName = checkedListBox1.CheckedItems[j].ToString();
				cSPName = cSPName.Substring(0, 1).ToUpper() + cSPName.Substring(1, cSPName.Length - 1);

                var dr = oclsData.drGetSParams(cSPName);

				StreamWriter sw = null;
				StringBuilder sb = null;

				sb = new StringBuilder(dsClassPrefix + "_" + cSPName);
				sb.Append(".cs");

				var oFileInfo = new FileInfo(sb.ToString());
				sw = oFileInfo.CreateText();

				sb = new StringBuilder("");

				sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");
				sb.Append(GlobalVar.cTab[0] + "// <autogenerated>");
				sb.Append(GlobalVar.cTab[0] + "// \t\tClass Name: ");
				sb.Append(dsClassPrefix + "_" + cSPName);
				sb.Append(".cs");
				sb.Append(GlobalVar.cTab[0] + "// \t\tObject purpose: The class is designed for manipulating data in a database table. ");
				sb.Append(GlobalVar.cTab[0] + "// \t\tIt can be used to fetch data via data access component and return as a DataReader ");
				sb.Append(GlobalVar.cTab[0] + "// \t\tor DataSet. This component could be fit in the position of middle tier if the system  ");
				sb.Append(GlobalVar.cTab[0] + "// \t\tis designed as multi-tiers. ");
				sb.Append(GlobalVar.cTab[0] + "// ");

				sb.Append(GlobalVar.cTab[0] + "// \t\tDesigned & developed by: Ben Li. ");
				sb.Append(GlobalVar.cTab[0] + "// \t\tThe last modified date: 03/02/2014.");
				sb.Append(GlobalVar.cTab[0] + "// \t\t");
				sb.Append(GlobalVar.cTab[0] + "// \t\t=====================================================");
				sb.Append(GlobalVar.cTab[0] + "// \t\tScripts generated Date: " + System.DateTime.Now + ".");
				sb.Append(GlobalVar.cTab[0] + "// </autogenerated> ");
				sb.Append(GlobalVar.cTab[0] + "// ");

				sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");
				sb.Append(GlobalVar.cTab[0] + "// Copyright (C) 2005 Mizuho Corporate Bank, Limited Sydney Branch.");
				sb.Append(GlobalVar.cTab[0] + "// All rights reserved. ");
				sb.Append(GlobalVar.cTab[0] + "// ");
				sb.Append(GlobalVar.cTab[0] + "// THIS CODES ARE GENERATED AUTOMATICLLY AND INFORMATION IS PROVIDED 'AS IS' ");
				sb.Append(GlobalVar.cTab[0] + "// WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT ");
				sb.Append(GlobalVar.cTab[0] + "// NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS ");
				sb.Append(GlobalVar.cTab[0] + "// FOR A PARTICULAR PURPOSE.");
				sb.Append(GlobalVar.cTab[0] + "// =============================================================================== ");

				sb.Append(GlobalVar.cTab[0] + " ");
				sb.Append(GlobalVar.cTab[0] + "using System;");
				sb.Append(GlobalVar.cTab[0] + "using System.Data;");
				sb.Append(GlobalVar.cTab[0] + "using System.IO;");
				sb.Append(GlobalVar.cTab[0] + "using System.Data.SqlClient;");
				sb.Append(GlobalVar.cTab[0] + "using System.Data.OleDb;");
				sb.Append(GlobalVar.cTab[0] + "using System.Reflection;");
				sb.Append(GlobalVar.cTab[0] + "using System.EnterpriseServices;");

				sb.Append(GlobalVar.cTab[0] );
				sb.Append(GlobalVar.cTab[0] + "using log4net;");
				sb.Append(GlobalVar.cTab[0] + "using log4net.Config;");
				sb.Append(GlobalVar.cTab[0] + "using " + entityNamespace + " "); ;

				
				sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.DataAccess;");
				sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.CmdBuilder;");
				sb.Append(GlobalVar.cTab[0] + "using mhcb.cs.Shared.Trace;");


				sb.Append(GlobalVar.cTab[0] );
				sb.Append(GlobalVar.cTab[0] + "namespace " + dsNamespace);		// begin of namespace

				sb.Append(GlobalVar.cTab[0] + "{");
				sb.Append(GlobalVar.cTab[0] + "[Transaction(TransactionOption.Required)]");
				sb.Append(GlobalVar.cTab[0] + "public class " + dsClassPrefix + "_" + cSPName + "_DataSev" + " : COMServiceBase ");
				sb.Append(GlobalVar.cTab[0] + "{");		// begin of class

				
				string className = dsClassPrefix + "_" + cSPName + "";
				string spName = "\"" + cSPName + "\"";
				string methodName = "\"" + "invoke_" + cSPName + "\"";
				string databaseName = "\"" + _DbName + "\"";

				sb.Append(GlobalVar.cTab[1] + "[ SqlCommandMethod(CommandType.StoredProcedure, " + spName + ")]");
				sb.Append(GlobalVar.cTab[1] + "public bool invoke_" + cSPName + "( ");

				// get a parameter string for the function
				CreateParameterList(dr);
				sb.Append(sb1);
				sb.Append(" )");	// closing bracketof parameter list


				sb.Append(GlobalVar.cTab[1] + "{");		// begin of method
				sb.Append(GlobalVar.cTab[1]);

				sb.Append(GlobalVar.cTab[2] + "Type mtype = typeof(" + className + "); ");
				sb.Append(GlobalVar.cTab[2] + "MethodInfo info = (MethodInfo)mtype.GetMethod(" + methodName + "); ");

				sb.Append(GlobalVar.cTab[1]);
				sb.Append(GlobalVar.cTab[2] + "bool blnSave = true;");
				sb.Append(GlobalVar.cTab[2] + "// Beginning of try");
				sb.Append(GlobalVar.cTab[2] + "try");
				sb.Append(GlobalVar.cTab[2] + "{");

				sb.Append(GlobalVar.cTab[3] + "//TraceMaker.TraceStart();");
				//sb.Append(GlobalVar.cTab[3] + "DataExecution oDE = new DataExecution();");             
                sb.Append(GlobalVar.cTab[3] + "using (DataExecution oDE = new DataExecution())");
                sb.Append(GlobalVar.cTab[3] + "using (SqlConnection dbConnection = new SqlConnection())");
                sb.Append(GlobalVar.cTab[3] + "{");

				sb.Append(GlobalVar.cTab[4] + "dbConnection.ConnectionString = oDE.getDefaultConnectionString();");
				sb.Append(GlobalVar.cTab[4] + "dbConnection.Open();");
				sb.Append(GlobalVar.cTab[4] + "using (SqlCommand oCommand = SqlCommandGenerator.GenerateCommand(dbConnection, info, new object[] {" );
				sb.Append(GlobalVar.cTab[5] + sb2);
				sb.Append(GlobalVar.cTab[5] + "}))");
				sb.Append(GlobalVar.cTab[4] + "{");
				sb.Append(GlobalVar.cTab[5] + "LogHelper.LogCommand(_logWriter, oCommand);");
				sb.Append(GlobalVar.cTab[5] + "oDE.ExecuteNonQuery(oCommand, dbConnection);");
				sb.Append(GlobalVar.cTab[5] + "using (SqlDataReader dr = oDE.ExecuteDataReader(oCommand, dbConnection))");
				sb.Append(GlobalVar.cTab[5] + "{");
				sb.Append(GlobalVar.cTab[6] + "if (dr.HasRows)");
				sb.Append(GlobalVar.cTab[6] + "{");
				sb.Append(GlobalVar.cTab[7] + "dr.Read();");
				sb.Append(GlobalVar.cTab[6] + "}");
				sb.Append(GlobalVar.cTab[5] + "}");
				sb.Append(GlobalVar.cTab[4] + "}");
				sb.Append(GlobalVar.cTab[3] + "}");
				sb.Append(GlobalVar.cTab[2] + "}");

				sb.Append(GlobalVar.cTab[2] + "catch (Exception ex)");
				sb.Append(GlobalVar.cTab[2] + "{");
				sb.Append(GlobalVar.cTab[3] + "_logWriter.ErrorFormat(\"Exception Caught:\\r\\n{0}\", ex);");
				sb.Append(GlobalVar.cTab[3] + "//TraceMaker.TraceException(ex);");
				sb.Append(GlobalVar.cTab[3] + "blnSave = false;");
				sb.Append(GlobalVar.cTab[2] + "}");
				sb.Append(GlobalVar.cTab[2] + "finally");
				sb.Append(GlobalVar.cTab[2] + "{");
				sb.Append(GlobalVar.cTab[3] + "//TraceMaker.TraceEnd();");
				sb.Append(GlobalVar.cTab[2] + "}");

				sb.Append(GlobalVar.cTab[2] + "// end of try");
				sb.Append(GlobalVar.cTab[0]);
				sb.Append(GlobalVar.cTab[2] + "return blnSave;");			
		

				sb.Append(GlobalVar.cTab[1] + "}");		
				sb.Append(GlobalVar.cTab[1] + "// end of method");

				sb.Append(GlobalVar.cTab[0] + "}");			
				sb.Append(GlobalVar.cTab[0] + "// end of class");

				sb.Append(GlobalVar.cTab[0] + "}");			
				sb.Append(GlobalVar.cTab[0] + "// end of namespace");

				output = output + sb;
				sw.WriteLine(sb.ToString());

                _logWriter.InfoFormat("Created an method {0}_{1} for the stored proceddure {1}. Save it as the file: {0}_{1}.cs",
                                    dsClassPrefix, cSPName);

                sw.Flush();
				sw.Close();

				if (j >= checkedListBox1.CheckedItems.Count - 1)
					return "The C# data layer class has been generated!"; 
				
			}

			return "The no C# data layer class has been generated!";
		}


		private void CreateParameterList(SqlDataReader dr)
		{
			int i = 0;

			sb1 = new StringBuilder("");
			sb2 = new StringBuilder("");
			sb3 = new StringBuilder("");

			while (dr.Read())
			{
				string cParameterName = dr.GetString(3);
				string cDataTypeName = DataType.ToSystemType_CS(dr.GetString(15));
				string cSqlDbType = DataType.ToSystemDataSqlDbType(dr.GetString(15));
				short iDataType = dr.GetInt16(9);

				short iParameterType = dr.GetInt16(5);

				int iDataLength = iDataType == 129 ? dr.GetInt32(10) : 0;

				if (cParameterName != "@RETURN_VALUE")
				{
					i += 1;
					if (i == 1)
					{
						if (iParameterType == 2)
						{
							if (iDataLength == 0)
							{
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + " " + ")] out " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
								sb3.Append(GlobalVar.cTab[3] + "p" + i.ToString(CultureInfo.InvariantCulture) + "=0;");
							}
							else
							{
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + ", " + iDataLength + ")] out " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
								sb3.Append(GlobalVar.cTab[3] + "p" + i.ToString(CultureInfo.InvariantCulture) + "=0;");
							}
						}
						else
						{
							if (iDataLength == 0)
							{
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + " " + ")] " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
							}
							else
							{
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + ", " + iDataLength + ")] " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
							}
						}
					}
					else
					{
						if (iParameterType == 2)
						{
							if (iDataLength == 0)
							{
								sb1.Append(",");
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + " " + ")] out " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
								sb3.Append(GlobalVar.cTab[3] + "p" + i.ToString(CultureInfo.InvariantCulture) + "=0;");
							}
							else
							{
								sb1.Append(",");
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + ", " + iDataLength + ")] out " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
								sb3.Append(GlobalVar.cTab[3] + "p" + i.ToString(CultureInfo.InvariantCulture) + "=0;");
							}
						}
						else
						{
							if (iDataLength == 0)
							{
								sb1.Append(",");
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + " " + ")] " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
							}
							else
							{
								sb1.Append(",");
								sb1.Append(GlobalVar.cTab[3] + "[SqlParameter(\"" + cParameterName.Substring(1) + "\", SqlDbType." + cSqlDbType + ", " + iDataLength + ")] " + cDataTypeName + " p" + i.ToString(CultureInfo.InvariantCulture));
							}
						}
					}


					if (i == 1)
					{
						sb2.Append("p" + i.ToString(CultureInfo.InvariantCulture));
					}
					else
					{
						sb2.Append(", p" + i.ToString(CultureInfo.InvariantCulture));
					}
				}
			}
		}


	}
}
